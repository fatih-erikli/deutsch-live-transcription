{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","results","setResults","useEffect","SpeechRecognition","window","webkitSpeechRecognition","SpeechGrammarList","webkitSpeechGrammarList","recognition","addFromString","speechRecognitionList","grammars","interimResults","continuous","lang","onresult","event","finalTranscript","interimTranscript","i","resultIndex","length","isFinal","transcript","start","className","map","result","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAmDeA,MAhDf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAoCA,OAnCAC,qBAAU,WACR,IAAMC,EACJC,OAAOD,mBAAqBC,OAAOC,wBAC/BC,EACJF,OAAOE,mBAAqBF,OAAOG,wBAE/BC,EAAc,IAAIL,GACR,IAAIG,GACZG,cAAR,kEAIA,IAAMC,EAAwB,IAAIJ,EAClCE,EAAYG,SAAWD,EACvBF,EAAYI,gBAAiB,EAC7BJ,EAAYK,YAAa,EACzBL,EAAYM,KAAO,QAEnBN,EAAYO,SAAW,SAAUC,GAI/B,IAHA,IAAIC,EAAkB,GAClBC,EAAoB,GAEfC,EAAIH,EAAMI,YAAaD,EAAIH,EAAMhB,QAAQqB,SAAUF,EACtDH,EAAMhB,QAAQmB,GAAGG,QACnBL,GAAmBD,EAAMhB,QAAQmB,GAAG,GAAGI,WAEvCL,GAAqBF,EAAMhB,QAAQmB,GAAG,GAAGI,WAI7CtB,EAAW,CAACgB,GAAmBC,KAGjCV,EAAYgB,UACX,IAED,sBAAKC,UAAU,gBAAf,4BAEE,uBACCzB,EAAQ0B,KAAI,SAACC,EAAQC,GAAT,OACX,8BAAkBD,GAARC,UCjCHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.30ef7c8a.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [results, setResults] = useState([]);\n  useEffect(() => {\n    const SpeechRecognition =\n      window.SpeechRecognition || window.webkitSpeechRecognition;\n    const SpeechGrammarList =\n      window.SpeechGrammarList || window.webkitSpeechGrammarList;\n\n    const recognition = new SpeechRecognition();\n    const grammar = new SpeechGrammarList();\n    grammar.addFromString(`\n      #JSGF V1.0;\n      <greeting>= (guten tag) {hi};\n    `);\n    const speechRecognitionList = new SpeechGrammarList();\n    recognition.grammars = speechRecognitionList;\n    recognition.interimResults = true;\n    recognition.continuous = true;\n    recognition.lang = \"de-DE\";\n\n    recognition.onresult = function (event) {\n      let finalTranscript = \"\";\n      let interimTranscript = \"\";\n\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\n        if (event.results[i].isFinal) {\n          finalTranscript += event.results[i][0].transcript;\n        } else {\n          interimTranscript += event.results[i][0].transcript;\n        }\n      }\n\n      setResults([finalTranscript || interimTranscript]);\n    };\n\n    recognition.start();\n  }, []);\n  return (\n    <div className=\"app-container\">\n      Language: de-DE\n      <br />\n      {results.map((result, index) => (\n        <div key={index}>{result}</div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}